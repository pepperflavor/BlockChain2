// typeScript로 블록 생성 만들기

// 환경 설정 하고

// ts-node 설치

// 설치 명령어
// ------------------------------------------------------
// npm install -D typescript ts-node @types/node
// ------------------------------------------------------

// tsconfig.json 만들기

// ------------------------------------------------------
// tsc --init
// ------------------------------------------------------

// tsconfig.json에서 paths 사용할거라

// 설치 명령어
// ------------------------------------------------------
// npm install -D tsconfig-paths
// ------------------------------------------------------

// 우리가 필요한 모듈 설치

// 머클루트와 해시값이 필요하니까
// crypto-js, merkle 설치

// 설치 명령어
// ------------------------------------------------------
//  npm install crypto-js merkle
// ------------------------------------------------------

// 22.11.03 체인 만들기

/*  blcok 클래스로 만든 블록들을 체인으로 연결시켜줄 chain을 클래스를 만들어 보자!

    chain 클래스에는 생성한 블록을 배열로 담아서 블록체인을 만들 예정
    지금까지 우리가 만든 블록은 블록의 속성으로 체이닝 이미 이뤄지고 있는데
    이전 블록 해시 값을 속성으로 가지고 있기 때문에 특정 블록 기준으로 이전블록의 해시값이 달라지면
    현재 블록의 이전 해시 값과 불일치가 발생해서 연결 고리가 끊긴다.
    chain 클래스를 따로 만들어서 생성된 블록을 하나의 배열안에 담아주는 역할을 할 예정

    이렇게 하는 이유는 이후에 우리가 마이닝 할 때 난이도 계산을 하기 위해서
*/

/*  POW (proof of work : 작업 증명)

    작업 증명 역사
    작업증의 기본 개념은 1933년도에 고안됐고
    1997년 영국의 암호학자인 애덤백의 해시캐시고 이후에 2009년 이 기술은
    사토시 나카모토라는 사람이 비트코인이 적용이 되어 오늘날까지 사용된다
    
    해시캐시는 대량으로 스펨메일을 방지하고자 고안된 것
    이메일을 보내기 위해서 작업증명 알고리즘을 이용해서 해시값을 찾고 그 보상으로 발행되는 우표같은.
    이 과정이 시간과 비용 많이 들고 발생되는 스팸메일을 막을 수 있는 방법으로 이 방식을 사용했다

    작업증명 방식을 거래가 발생하면 해당 거래가 유용한지에 대한 합의 검증방식

    논스값을 이제 사용하고

    ++ 설명
        작업증명은 어려운 수학문제를 푸는 것 이라고 생각할 수 있다.
        어려운 수학문제를 풀게해서 이 문제를 푼 사람에게 보상으로 코인을 주는것

        여기서 특정 조건을 만족하는 논스값을 찾는 것이다

        블록체인 상의 모든 참여자는 동일한 순서로 블록을 연결하기 위해서
        합의 알고리즘이 필요하고
        대표적인 합의 알고리즘은 POW, POS, DPOS, POA 등이 있다.
    +++++++++++++++++++++++++++++++++++++++++++++


    난이도가 4
    논스 ???
    0000이상인 해시값이 나올때 까지 목표값이 나올때 까지
    논스를 0에서 계속 하나씩 더하면서 해싱을 해서 목표값을 찾는것 
    00000 -> 000000

    작업 증명 방식POW 는 목표값 이하의 해시 값을 찾는 과정을 무수히 반복해서
    해당 작업에 참여했음을 증명하는 방식의 알고리즘.

    작업 증명 알고리즘의 필요성은 네트워크 상의 모든 노드가 동시에 블록을 만들 수 없게 하는것
    작업증명을 통과해야만 새로운 블록을 추가 생성할 수 있게 된다

    작업증명 알고리즘은 Difficulty 조절 알고리즘을 이용해서 약 10분당 1개의 블록이 생성되는 것을 보장하게 된다.

    난이도 조정 블록 범위 => 10
    블록의 생성시간 (단위 : 분)=> 10
    생성 시간 (단위 : 초) => 60
    
    Difficulty 조절 알고리즘은 다음과 같이 설계하자

    블록 한개가 생성되는 예상 시산을 10분으로 설정하고, 10개의 블록을 한 묶음으로 해서 블로 한 묶음이 생성되는
    예상시간을 6000 초라는 값을 할당해주고 이후 10개의 블록이 생성되는데 걸리는 시간 timeExpected / 2보다 작을경우
    난이도 조절을 1 증가시키고 timeExpected * 2 보다 오래걸릴 경우 난이도 조절 -1
*/