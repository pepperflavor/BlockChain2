// typeScript 란?
// javaScript에서 타입 설정이 추가된 언어라고 보면된다
// javaScript에서 타입이 확장된 언어
/*  typeScript는 javaScript의 상위 집합 슈퍼셋으로써    대형프로젝트를 진행할때 어느정도 약점 오류를 잡는데 좋다
    C++, C# 같이 객체지향 프로그래밍을 지원하는데
    TypeScript는 객체지향 프로그래밍에 특화된 프로그래밍 패턴을 지원하는데 현재는 함수형 프로그래밍이 대세라서 타입검사나 추론등의 기능을 사용만 할예정
*/

/*  
    typeScript를 쓰면 javaScript로 작업할 때보다 개발에서 생기는 에러를 사전에 방지할 수 있고
    javScript의 코드의 품질과 개발 생산성을 높일 수 있다.
*/

/*
    코드의 완성 가이드
    javaScript는 타입이 정해져 있지 않아서 자동완성이 미리 뜨지 않아 일일히 타이핑 해야한다
    typeScript는 타입을 정해놔서 미리 자동완성이 뜨기 때문에 빠르고 정확하게 작업할 수 있다.

    typeScript는 에러를 사전에 방지하는데 javaScript는 코드를 실행시켜야 에러를 확인할 수 있다
    typeScript는 작성한 코드에 문제가 있으면 실행시키기 전부터 바로바로 확인해서 문제를 해결할 수 있다.

    typeScript는 프로그래밍 언어이고 typeScript의 컴파일은 typeScript 코드를 javaScript로 바꿔주는 것이다 javaScript로 바꿔주는 이유는 브라우저가 이해할 수 있는것이 typeScript가 아닌 javaScript이기 때문이다.
*/

// 타입 스트립트 설치
/*  =================================================
        npm install -g typescript
    =================================================
*/

// 설치완료되었는지 확인
/*  ===============================================
            tsc --version
    ===============================================
*/


// tsconfig.json 생성 명령어
/*
    ----------------------------------------------------
        tsc --init
    ----------------------------------------------------
*/

/*  tsconfig.json은 typScript의 설정파일이다. typScript의 설정값을 조정할 수 있다.
    
    typScript의 변수 타입 지정
    - 변수명 : 타입 = 초기값 dldjTsmsep

    ts-node 라는 typeScript 실행기를 사용해서 개발 환경에서 typeScript로 작성된 파일을 실행 시켜 볼 수 있ㄷ
*/

/* 설치 명령어
==================================================
    npm install -g typescript ts-node @types/node
==================================================

*/